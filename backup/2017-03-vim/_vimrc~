set nocompatible	" ²»¼æÈİÄ£Ê½£¬·ÅÔÚµÚÒ»ĞĞ²ÅÄÜ±£Ö¤ËùÓĞÑ¡Ïî¿ÉÓÃ

"set mapleader
let mapleader = ","

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""FUNCTION
" Platform
function! MySys()
	if has("win32")
		return "windows"
	else
		return "linux"
	endif
endfunction

"function! SwitchToBuf(filename)
"	"let fullfn = substitute(a:filename, "^\\~/", $HOME . "/", "")
"	" find in current tab
"	let bufwinnr = bufwinnr(a:filename)
"	if bufwinnr != -1
"		exec bufwinnr . "wincmd w"
"		return
"	else
"	" find in each tab
"		tabfirst
"		let tab = 1
"		while tab <= tabpagenr("$")
"				let bufwinnr = bufwinnr(a:filename)
"				if bufwinnr != -1
"					exec "normal " . tab . "gt"
"					exec bufwinnr . "wincmd w"
"					return
"				endif
"				tabnext
"				let tab = tab + 1
"		endwhile
"		" not exist, new tab
"		exec "tabnew " . a:filename
"	endif
"endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if MySys() == 'windows'
    "source $VIMRUNTIME/vimrc_example.vim
    source $VIMRUNTIME/mswin.vim
    behave mswin

    set diffexpr=MyDiff()
    function! MyDiff()
        let opt = '-a --binary '
        if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
        if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
        let arg1 = v:fname_in
        if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
        let arg2 = v:fname_new
        if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
        let arg3 = v:fname_out
        if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
        let eq = ''
        if $VIMRUNTIME =~ ' '
          if &sh =~ '\<cmd'
            let cmd = '""' . $VIMRUNTIME . '\diff"'
            let eq = '"'
          else
            let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
          endif
        else
          let cmd = $VIMRUNTIME . '\diff'
        endif
        silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
    endfunction
elseif MySys() == 'linux'
endif

"Fast edit vimrc
if MySys() == 'linux'
		"Fast reloading of the .vimrc
		map <silent> <leader>ss :source ~/.vimrc<cr>
		"Fast editing of .vimrc
		"map <silent> <leader>ee :call SwitchToBuf("~/.vimrc")<cr>
		map <silent> <leader>ee :e ~/.vimrc<cr>
		"When .vimrc is edited, reload it
		autocmd! bufwritepost .vimrc source ~/.vimrc
elseif MySys() == 'windows'
		" Set helplang
		"set helplang=cn
		"Fast reloading of the _vimrc
		map <silent> <leader>ss :source $VIM/_vimrc<cr>
		"Fast editing of _vimrc
		"map <silent> <leader>ee :call SwitchToBuf("~/_vimrc")<cr>
		map <silent> <leader>ee :e $VIM/_vimrc<cr>
		"When _vimrc is edited, reload it
		autocmd! bufwritepost _vimrc source $VIM/_vimrc
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUG SET
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"
""""""""""""""""""""""""""""""
" Tag list (ctags)
""""""""""""""""""""""""""""""
"if MySys() == "windows"
"	let Tlist_Ctags_Cmd = 'ctags'
"elseif MySys() == "linux"
"	let Tlist_Ctags_Cmd = '/usr/bin/ctags' "Éè¶¨linuxÏµÍ³ÖĞctags³ÌĞòµÄÎ»ÖÃ
"endif
"let Tlist_Show_One_File = 1 "²»Í¬Ê±ÏÔÊ¾¶à¸öÎÄ¼şµÄtag£¬Ö»ÏÔÊ¾µ±Ç°ÎÄ¼şµÄ
"let Tlist_Exit_OnlyWindow = 1 "Èç¹ûtaglist´°¿ÚÊÇ×îºóÒ»¸ö´°¿Ú£¬ÔòÍË³övim
"let Tlist_Use_Right_Window = 1 "ÔÚÓÒ²à´°¿ÚÖĞÏÔÊ¾taglist´°¿Ú
"let Tlist_Use_SingleClick = 1 "µ¥»÷´ò¿ª±êÇ©
"
""<F9>ÇĞ»»taglist´ò¿ª»ò¹Ø±Õ
"map <silent> <F9> :TlistToggle<cr>

""""""""""""""""""""""""""""""
" netrw setting
""""""""""""""""""""""""""""""
"nmap <silent> <leader>fe :Sexplore!<cr>
"let g:netrw_winsize = 30

""""""""""""""""""""""""""""""
" BufExplorer
""""""""""""""""""""""""""""""
"let g:bufExplorerDefaultHelp=0
"let g:bufExplorerShowRelativePath=1
"let g:bufExplorerSortBy='mru'
"let g:bufExplorerSplitRight=0
"let g:bufExplorerSplitVertical=1
"let g:bufExplorerSplitVertSize = 30
"let g:bufExplorerUseCurrentWindow=1
"autocmd BufWinEnter \[Buf\ List\] setl

"""""""""""""""""""""""""""""""
" winManager setting
""""""""""""""""""""""""""""""
"let g:winManagerWindowLayout = "BufExplorer,FileExplorer|TagList"
"let g:winManagerWidth = 30
"let g:defaultExplorer = 0
"nmap <C-W><C-F> :FirstExplorerWindow<cr>
"nmap <C-W><C-B> :BottomExplorerWindow<cr>
"nmap <silent> <leader>wm :WMToggle<cr>
"

"Switch to current dir
"map <leader>cd :cd %:p:h<cr>

"	""""""""""""""""""""""""""""""
"	" lookupfile setting
"	""""""""""""""""""""""""""""""
"	let g:LookupFile_MinPatLength = 2               "×îÉÙÊäÈë2¸ö×Ö·û²Å¿ªÊ¼²éÕÒ
"	let g:LookupFile_PreserveLastPattern = 0        "²»±£´æÉÏ´Î²éÕÒµÄ×Ö·û´®
"	let g:LookupFile_PreservePatternHistory = 1     "±£´æ²éÕÒÀúÊ·
"	let g:LookupFile_AlwaysAcceptFirst = 1          "»Ø³µ´ò¿ªµÚÒ»¸öÆ¥ÅäÏîÄ¿
"	let g:LookupFile_AllowNewFiles = 0              "²»ÔÊĞí´´½¨²»´æÔÚµÄÎÄ¼ş
"	if filereadable("./filenametags")                "ÉèÖÃtagÎÄ¼şµÄÃû×Ö
"		let g:LookupFile_TagExpr = '"./filenametags"'
"	endif
"	"Ó³ÉäLookupFileÎª,lk
"	nmap <silent> <leader>lk <Plug>LookupFile<cr>
"	"Ó³ÉäLUBufsÎª,ll
"	"nmap <silent> <leader>ll :LUBufs<cr>
"	"Ó³ÉäLUWalkÎª,lw
"	nmap <silent> <leader>lw :LUWalk<cr>
"	""""""""""""""""""""""""""""""
"	" Tag list (ctags)
"	""""""""""""""""""""""""""""""
"	if MySys() == "windows"  "Éè¶¨windowsÏµÍ³ÖĞctags³ÌĞòµÄÎ»ÖÃ
"		let Tlist_Ctags_Cmd = 'ctags'
"	elseif MySys() == "linux" "Éè¶¨linuxÏµÍ³ÖĞctags³ÌĞòµÄÎ»ÖÃ
"		let Tlist_Ctags_Cmd = '/usr/bin/ctags'
"	endif
"	let Tlist_Show_One_File = 1 "²»Í¬Ê±ÏÔÊ¾¶à¸öÎÄ¼şµÄtag£¬Ö»ÏÔÊ¾µ±Ç°ÎÄ¼şµÄ
"	let Tlist_Exit_OnlyWindow = 1 "Èç¹ûtaglist´°¿ÚÊÇ×îºóÒ»¸ö´°¿Ú£¬ÔòÍË³övim
"	let Tlist_Use_Right_Window = 1 "ÔÚÓÒ²à´°¿ÚÖĞÏÔÊ¾taglist´°¿Ú

"""""""""""""""""""""""""""""""""""""""""""""""PLUG END

"""""""""""""""""""""""""""""""""""""""""""""""SETTING
if has("gui_running")
    set cursorline
    hi cursorline guibg=#333333
    hi CursorColumn guibg=#333333
  
    "¿ìËÙÆôÓÃ²Ëµ¥
    map <silent> <F2> :if &guioptions =~# 'T' <Bar>
    	   \set guioptions-=T <Bar>
    	   \set guioptions-=m <Bar>
       \else <Bar>
    	   \set guioptions+=T <Bar>
    	   \set guioptions+=m <Bar>
       \endif<CR>
  
  
    "¹â±êÍ£Ö¹ÉÁË¸
    set guicursor+=n-v-i-c-r:block-cursor-blinkon0
    "¼ò»¯½çÃæ
    set guioptions-=m
    set guioptions-=T
    set guioptions-=L
    set guioptions-=l
    set guioptions-=r
    set guioptions-=R
  
    "Æô¶¯´óĞ¡ ¼°ÅäÉ«
    if MySys() == "linux"
        winpos 0 30
        set lines=37 columns=70
		colo koehler
	elseif MySys() == "windows"
		colo darkblue
    endif
else
    colo elflord
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""Ò»°ãÉè¶¨£¨²»Çø·ÖÆ½Ì¨£©
"ÔÚvimÖĞ²é¿´Man
runtime ftplugin/man.vim

"È¥µôÃ¿ĞĞ¿ªÍ·ÏÔÊ¾¸ö"@"
set dy=lastline

"Enable filetype plugin
filetype plugin indent on

set noincsearch
set showcmd

set directory=/tmp,.,~/tmp,/var/tmp
set wildmenu "ÏÔÊ¾ÃüÁîºòÑ¡Ñ¡Ïî

"No sound on errors.
set noerrorbells
set novisualbell
set t_vb=

"¹â±êÏŞ¶¨ÆßĞĞÄÚÒÆ¶¯
set so=7

"ÈÃvi×Ô¶¯Ê¶±ğ±àÂë
set fencs=ucs-bom,utf-8,gb18030,gbk,gb2312,big5,euc-jp,euc-kr,latin1,cp936

"¹¤×÷Ä¿Â¼Îªµ±Ç°Ä¿Â¼
set autochdir

" Æô¶¯µÄÊ±ºò²»ÏÔÊ¾ÄÇ¸öÔ®ÖúË÷ÂíÀï¶ùÍ¯µÄÌáÊ¾
set shortmess=atI

"Ê¹ÓÃÊó±ê
set mouse=a

syntax on

set tabstop=4		" Set default tab width to 4, default is 8
set bs=2		" allow backspacing over everything in insert mode
"set ai			" always set autoindenting on
"set backup		" keep a backup file
"set viminfo='20,\"50	" read/write a .viminfo file, don't store more
			" than 50 lines of registers
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time

" Only do this part when compiled with support for autocommands
if has("autocmd")
  " In text files, always limit the width of text to 78 characters
  autocmd BufRead *.txt set tw=78
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
endif

"if has("cscope") && filereadable("/usr/bin/cscope")
"   set csprg=/usr/bin/cscope
"   set csto=0
"   set cst
"   set nocsverb
"   " add any database in current directory
"   if filereadable("cscope.out")
"      cs add cscope.out
"   " else add database pointed to by environment
"   elseif $CSCOPE_DB != ""
"      cs add $CSCOPE_DB
"   endif
"   set csverb
"endif


if &term=="xterm"
     set t_Co=8
     set t_Sb=[4%dm
     set t_Sf=[3%dm
endif

"""""""""""""""""""""""""""""""""""""""""""""""""SETTING END

""""""""""""""""""""""""""""""""""""""""""""""""""
"	MAP SET
"""""""""""""""""""""""""""""""""""""""""""""""""

"other mapset
map <silent> <leader>n :tabnew<cr>
map <silent> <leader>l :tabnext<cr>
map <silent> <leader>h :tabprevious<cr>

map <silent> <leader>o :only<cr>

"ÏµÍ³¼ôÌù°åÊ¹ÓÃ
nmap <F3> "*

"Map space to / and c-space to ?
nmap <space> <c-d>
nmap <bs> <c-u>

"Smart way to move btw. windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

"É¾³ıÄ©Î²µÄ¶àÓà¿Õ¸ñ
map <silent> <leader>el :%s/\s\+$//<cr>
"quick exit
map <silent> <leader>q :q<cr>
"""""""""""""""""""""""""""""""""""""""""""""""""MAP END

"""""""""""""""""""""""""""""""""""""""""""""""""ORIGIN
"set nocompatible
""set nu
"set tabstop=4
"source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
"behave mswin
"
"set diffexpr=MyDiff()
"function! MyDiff()
"  let opt = '-a --binary '
"  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
"  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
"  let arg1 = v:fname_in
"  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
"  let arg2 = v:fname_new
"  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
"  let arg3 = v:fname_out
"  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
"  let eq = ''
"  if $VIMRUNTIME =~ ' '
"    if &sh =~ '\<cmd'
"      let cmd = '""' . $VIMRUNTIME . '\diff"'
"      let eq = '"'
"    else
"      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
"    endif
"  else
"    let cmd = $VIMRUNTIME . '\diff'
"  endif
"  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
"endfunction
"
"colo darkblue
"set nobackup
""¹â±êÍ£Ö¹ÉÁË¸
"set guicursor+=n-v-i-c-r:block-cursor-blinkon0
""¼ò»¯½çÃæ
"set guioptions-=m
"set guioptions-=T
"set guioptions-=L
"set guioptions-=l
"set guioptions-=r
"set guioptions-=R
""¿ìËÙÆôÓÃ
"map <silent> <F2> :if &guioptions =~# 'T' <Bar>
"       \set guioptions-=T <Bar>
"       \set guioptions-=m <Bar>
"   \else <Bar>
"       \set guioptions+=T <Bar>
"       \set guioptions+=m <Bar>
"   \endif<CR>
""¹¤×÷Ä¿Â¼Îªµ±Ç°Ä¿Â¼
"set autochdir
"map <silent> <leader>sv :w ~\×ÀÃæ\
"
""È«ÆÁÉèÖÃ
"map <F11> <Esc>:simalt ~x<cr>
""if has('gui_running') && has("win32")
""    au GUIEnter * simalt ~x
""endif
""map <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>
"
""È¥µôÃ¿ĞĞ¿ªÍ·ÏÔÊ¾¸ö"@"
"set dy=lastline
"filetype plugin indent on
""ÈÃvi×Ô¶¯Ê¶±ğ±àÂë
"set fencs=ucs-bom,utf-8,gb18030,gbk,gb2312,big5,euc-jp,euc-kr,latin1,cp936
"
""Set mapleader
"let mapleader = ","
""Fast reloading of the .vimrc
"map <silent> <leader>ss :source $VIM\_vimrc<cr>
""Fast editing of .vimrc
"map <silent> <leader>ee :e $VIM\_vimrc<cr>
""When .vimrc is edited, reload it
"autocmd! bufwritepost .vimrc source $VIM\_simrc<cr>
""other mapset
"map <silent> <leader>n :tabnew<cr>
"map <silent> <leader>l :tabnext<cr>
"map <silent> <leader>h :tabprevious<cr>
"
"set noincsearch
"set nohls
"
"set directory=c:\tmp,.,c:\temp
"set wildmenu "ÏÔÊ¾ÃüÁîºòÑ¡Ñ¡Ïî
"
""¹â±êÏŞ¶¨ÆßĞĞÄÚÒÆ¶¯
"set so=7
"
""Map space to / and c-space to ?
"map <space> /
"map <s-space> ?
"
""Smart way to move btw. windows
"map <C-j> <C-W>j
"map <C-k> <C-W>k
"map <C-h> <C-W>h
"map <C-l> <C-W>l
"
""Switch to current dir
"map <leader>cd :cd %:p:h<cr>
"
"if has("gui_running")
"  set cursorline
"  hi cursorline guibg=#333333
"  hi CursorColumn guibg=#333333
"endif
""É¾³ıÄ©Î²µÄ¶àÓà¿Õ¸ñ
"map <silent> <leader>el :%s/\s\+$//<cr>
""quick exit
"map <silent> <leader>q :q<cr>
"
""No sound on errors.
"set noerrorbells
"set novisualbell
"set t_vb=
